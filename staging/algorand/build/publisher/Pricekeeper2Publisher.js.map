{"version":3,"file":"Pricekeeper2Publisher.js","sourceRoot":"","sources":["../../backend/publisher/Pricekeeper2Publisher.ts"],"names":[],"mappings":"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","sourcesContent":["import algosdk from 'algosdk'\r\nimport { IPublisher, PublishInfo } from './IPublisher'\r\nimport { StatusCode } from '../common/statusCodes'\r\nimport { PythData } from 'backend/common/basetypes'\r\nconst PricecasterLib = require('../../lib/pricecaster')\r\nconst tools = require('../../tools/app-tools')\r\nconst { arrayChunks } = require('../../tools/app-tools')\r\n\r\nexport class Pricekeeper2Publisher implements IPublisher {\r\n  private algodClient: algosdk.Algodv2\r\n  private pclib: any\r\n  private account: algosdk.Account\r\n  private vaaProcessorAppId: number\r\n  private vaaProcessorOwner: string\r\n  private numOfVerifySteps: number = 0\r\n  private guardianCount: number = 0\r\n  private stepSize: number = 0\r\n  private dumpFailedTx: boolean\r\n  private dumpFailedTxDirectory: string | undefined\r\n  private compiledVerifyProgram: { bytes: Uint8Array, hash: string } = { bytes: new Uint8Array(), hash: '' }\r\n  constructor (vaaProcessorAppId: number,\r\n    priceKeeperAppId: number,\r\n    vaaProcessorOwner: string,\r\n    verifyProgramBinary: Uint8Array,\r\n    verifyProgramHash: string,\r\n    signKey: algosdk.Account,\r\n    algoClientToken: string,\r\n    algoClientServer: string,\r\n    algoClientPort: string,\r\n    dumpFailedTx: boolean = false,\r\n    dumpFailedTxDirectory: string = './') {\r\n    this.account = signKey\r\n    this.compiledVerifyProgram.bytes = verifyProgramBinary\r\n    this.compiledVerifyProgram.hash = verifyProgramHash\r\n    this.vaaProcessorAppId = vaaProcessorAppId\r\n    this.vaaProcessorOwner = vaaProcessorOwner\r\n    this.dumpFailedTx = dumpFailedTx\r\n    this.dumpFailedTxDirectory = dumpFailedTxDirectory\r\n    this.algodClient = new algosdk.Algodv2(algoClientToken, algoClientServer, algoClientPort)\r\n    this.pclib = new PricecasterLib.PricecasterLib(this.algodClient)\r\n    this.pclib.setAppId('vaaProcessor', vaaProcessorAppId)\r\n    this.pclib.setAppId('pricekeeper', priceKeeperAppId)\r\n    this.pclib.enableDumpFailedTx(this.dumpFailedTx)\r\n    this.pclib.setDumpFailedTxDirectory(this.dumpFailedTxDirectory)\r\n  }\r\n\r\n  async start () {\r\n  }\r\n\r\n  stop () {\r\n  }\r\n\r\n  signCallback (sender: string, tx: algosdk.Transaction) {\r\n    const txSigned = tx.signTxn(this.account.sk)\r\n    return txSigned\r\n  }\r\n\r\n  async publish (data: PythData): Promise<PublishInfo> {\r\n    const publishInfo: PublishInfo = { status: StatusCode.OK }\r\n\r\n    const txParams = await this.algodClient.getTransactionParams().do()\r\n    txParams.fee = 1000\r\n    txParams.flatFee = true\r\n\r\n    this.guardianCount = await tools.readAppGlobalStateByKey(this.algodClient, this.vaaProcessorAppId, this.vaaProcessorOwner, 'gscount')\r\n    this.stepSize = await tools.readAppGlobalStateByKey(this.algodClient, this.vaaProcessorAppId, this.vaaProcessorOwner, 'vssize')\r\n    this.numOfVerifySteps = Math.ceil(this.guardianCount / this.stepSize)\r\n    if (this.guardianCount === 0 || this.stepSize === 0) {\r\n      throw new Error('cannot get guardian count and/or step-size from global state')\r\n    }\r\n    //\r\n    // (!)\r\n    // Stateless programs cannot access state nor stack from stateful programs, so\r\n    // for the VAA Verify program to use the guardian set, we pass the global state as TX argument,\r\n    // (and check it against the current global list to be sure it's ok). This way it can be read by\r\n    // VAA verifier as a stateless program CAN DO READS of call transaction arguments in a group.\r\n    // The same technique is used for the note field, where the payload is set.\r\n    //\r\n\r\n    try {\r\n      const guardianKeys = []\r\n      const buf = Buffer.alloc(8)\r\n      for (let i = 0; i < this.guardianCount; i++) {\r\n        buf.writeBigUInt64BE(BigInt(i++))\r\n        const gk = await tools.readAppGlobalStateByKey(this.algodClient, this.vaaProcessorAppId, this.vaaProcessorOwner, buf.toString())\r\n        guardianKeys.push(Buffer.from(gk, 'base64').toString('hex'))\r\n      }\r\n\r\n      if (guardianKeys.length === 0) {\r\n        throw new Error('No guardian keys in global state.')\r\n      }\r\n\r\n      const keyChunks = arrayChunks(guardianKeys, this.stepSize)\r\n      const sigChunks = arrayChunks(data.signatures, this.stepSize * 132)\r\n\r\n      const gid = this.pclib.beginTxGroup()\r\n      for (let i = 0; i < this.numOfVerifySteps; i++) {\r\n        this.pclib.addVerifyTx(gid, this.compiledVerifyProgram.hash, txParams, data.vaaBody, keyChunks[i], this.guardianCount)\r\n      }\r\n      this.pclib.addPriceStoreTx(gid, this.vaaProcessorOwner, txParams, data.vaaBody.slice(51))\r\n      const txId = await this.pclib.commitVerifyTxGroup(gid, this.compiledVerifyProgram.bytes, data.signatures.length, sigChunks, this.vaaProcessorOwner, this.signCallback.bind(this))\r\n      publishInfo.txid = txId\r\n      publishInfo.confirmation = algosdk.waitForConfirmation(this.algodClient, txId, 10)\r\n    } catch (e: any) {\r\n      publishInfo.status = StatusCode.ERROR_SUBMIT_MESSAGE\r\n      if (e.response) {\r\n        publishInfo.reason = e.response.text ? e.response.text : e.toString()\r\n      } else {\r\n        publishInfo.reason = e.toString()\r\n      }\r\n      return publishInfo\r\n    }\r\n\r\n    return publishInfo\r\n  }\r\n}\r\n"]}