{"version":3,"file":"SymbolInfo.js","sourceRoot":"","sources":["../../backend/engine/SymbolInfo.ts"],"names":[],"mappings":";;;AAmBA,gDAAsD;AACtD,6CAA+E;AAE/E,MAAM,2BAA2B,GAA4B;IAC3D,cAAc,EAAE,8CAA8C;IAC9D,MAAM,EAAE,6CAA6C;IACrD,OAAO,EAAE,8CAA8C;CACxD,CAAA;AAED,MAAa,cAAc;IAGzB,YAAa,OAAgB;QAC3B,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE,CAAA;QAC1B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;IACxB,CAAC;IAKO,2BAA2B,CAAE,OAAgB;QACnD,IAAI,2BAA2B,CAAC,OAAO,CAAC,KAAK,SAAS,EAAE;YACtD,OAAO,IAAI,mBAAS,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAC,CAAA;SAC3D;aAAM;YACL,MAAM,IAAI,KAAK,CACb,gCAAgC,OAAO,wBAAwB,IAAI,CAAC,SAAS,CAC3E,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,CACzC,EAAE,CACJ,CAAA;SACF;IACH,CAAC;IAED,KAAK,CAAC,IAAI;QACR,MAAM,UAAU,GAAG,IAAI,oBAAU,CAAC,IAAA,uBAAa,EAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAA;QAC9D,MAAM,aAAa,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QACpE,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,kBAAkB,CAAC,aAAa,EAAE,WAAW,CAAC,CAAA;QAEhF,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE;YAC1B,MAAM,WAAW,GAAG,IAAA,yBAAgB,EAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;YACtD,IAAI,WAAW,CAAC,IAAI,KAAK,CAAC,EAAE;gBAE1B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,WAAW,CAAC,eAAe,CAAC,QAAQ,EAAE,EAC/E,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;aAC9B;SACF;IACH,CAAC;IAED,SAAS,CAAE,SAAiB,EAAE,OAAe;QAC3C,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,GAAG,OAAO,CAAC,CAAA;IAChD,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAA;IAC5B,CAAC;CACF;AA7CD,wCA6CC","sourcesContent":["/**\r\n * Pricecaster Service.\r\n *\r\n * Fetcher backend component.\r\n *\r\n * Copyright 2022 Wormhole Project Contributors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { parseProductData } from '@pythnetwork/client'\r\nimport { Cluster, clusterApiUrl, Connection, PublicKey } from '@solana/web3.js'\r\n\r\nconst CLUSTER_TO_PYTH_PROGRAM_KEY: Record<Cluster, string> = {\r\n  'mainnet-beta': 'FsJ3A3u2vn5cTVofAjvy6y5kwABJAqYWpe4975bi2epH',\r\n  devnet: 'gSbePebfvPy7tRqimPoVecS2UsBvYv46ynrzWocc92s',\r\n  testnet: '8tfDNiaEyrV6Q1U4DEXrEigs9DoDtkugzFbybENEbCDz'\r\n}\r\n\r\nexport class PythSymbolInfo {\r\n  private network: Cluster;\r\n  private symbolMap: Map<string, string>\r\n  constructor (network: Cluster) {\r\n    this.symbolMap = new Map()\r\n    this.network = network\r\n  }\r\n\r\n  /**\r\n   * Gets the public key of the Pyth program running on the given cluster.\r\n   */\r\n  private getPythProgramKeyForCluster (cluster: Cluster): PublicKey {\r\n    if (CLUSTER_TO_PYTH_PROGRAM_KEY[cluster] !== undefined) {\r\n      return new PublicKey(CLUSTER_TO_PYTH_PROGRAM_KEY[cluster])\r\n    } else {\r\n      throw new Error(\r\n        `Invalid Solana cluster name: ${cluster}. Valid options are: ${JSON.stringify(\r\n          Object.keys(CLUSTER_TO_PYTH_PROGRAM_KEY)\r\n        )}`\r\n      )\r\n    }\r\n  }\r\n\r\n  async load () {\r\n    const connection = new Connection(clusterApiUrl(this.network))\r\n    const pythPublicKey = this.getPythProgramKeyForCluster(this.network)\r\n    const accounts = await connection.getProgramAccounts(pythPublicKey, 'finalized')\r\n\r\n    for (const acc of accounts) {\r\n      const productData = parseProductData(acc.account.data)\r\n      if (productData.type === 2) {\r\n        // console.log(`prod: ${acc.pubkey.toBase58()} price: ${productData.priceAccountKey.toBase58()} ${productData.product.symbol}`)\r\n        this.symbolMap.set(acc.pubkey.toBase58() + productData.priceAccountKey.toBase58(),\r\n          productData.product.symbol)\r\n      }\r\n    }\r\n  }\r\n\r\n  getSymbol (productId: string, priceId: string) {\r\n    return this.symbolMap.get(productId + priceId)\r\n  }\r\n\r\n  getSymbolCount () {\r\n    return this.symbolMap.size\r\n  }\r\n}\r\n"]}