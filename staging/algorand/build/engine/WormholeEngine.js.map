{"version":3,"file":"WormholeEngine.js","sourceRoot":"","sources":["../../backend/engine/WormholeEngine.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Pricecaster Service.\r\n *\r\n * Fetcher backend component.\r\n *\r\n * Copyright 2022 Wormhole Project Contributors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { IEngine } from './IEngine'\r\nimport { IAppSettings } from '../common/settings'\r\nimport { IPriceFetcher } from '../fetcher/IPriceFetcher'\r\nimport { IPublisher, PublishInfo } from '../publisher/IPublisher'\r\nimport { StatusCode } from '../common/statusCodes'\r\nimport { WormholePythPriceFetcher } from '../fetcher/WormholePythPriceFetcher'\r\nimport { Pricekeeper2Publisher } from '../publisher/Pricekeeper2Publisher'\r\nimport * as Logger from '@randlabs/js-logger'\r\nimport { sleep } from '../common/sleep'\r\nimport { PythSymbolInfo } from './SymbolInfo'\r\nimport { PythData } from 'backend/common/basetypes'\r\nconst fs = require('fs')\r\nconst algosdk = require('algosdk')\r\n\r\ntype WorkerRoutineStatus = {\r\n  status: StatusCode,\r\n  reason?: string,\r\n  data?: PythData,\r\n  pub?: PublishInfo\r\n}\r\n\r\nasync function workerRoutine (fetcher: IPriceFetcher, publisher: IPublisher): Promise<WorkerRoutineStatus> {\r\n  const data: PythData = fetcher.queryData()\r\n  if (data === undefined) {\r\n    return { status: StatusCode.NO_TICKER }\r\n  }\r\n  const pub = await publisher.publish(data)\r\n  return { status: pub.status, reason: pub.reason, data, pub }\r\n}\r\n\r\nexport class WormholeClientEngine implements IEngine {\r\n  private settings: IAppSettings\r\n  private shouldQuit: boolean\r\n  constructor (settings: IAppSettings) {\r\n    this.settings = settings\r\n    this.shouldQuit = false\r\n  }\r\n\r\n  async start () {\r\n    process.on('SIGINT', () => {\r\n      console.log('Received SIGINT')\r\n      Logger.finalize()\r\n      this.shouldQuit = true\r\n    })\r\n\r\n    let mnemo, verifyProgramBinary\r\n    try {\r\n      mnemo = fs.readFileSync(this.settings.apps.ownerKeyFile)\r\n      verifyProgramBinary = Uint8Array.from(fs.readFileSync(this.settings.apps.vaaVerifyProgramBinFile))\r\n    } catch (e) {\r\n      throw new Error('❌ Cannot read account and/or verify program source: ' + e)\r\n    }\r\n\r\n    const publisher = new Pricekeeper2Publisher(this.settings.apps.vaaProcessorAppId,\r\n      this.settings.apps.priceKeeperV2AppId,\r\n      this.settings.apps.ownerAddress,\r\n      verifyProgramBinary,\r\n      this.settings.apps.vaaVerifyProgramHash,\r\n      algosdk.mnemonicToSecretKey(mnemo.toString()),\r\n      this.settings.algo.token,\r\n      this.settings.algo.api,\r\n      this.settings.algo.port,\r\n      this.settings.algo.dumpFailedTx,\r\n      this.settings.algo.dumpFailedTxDirectory\r\n    )\r\n\r\n    Logger.info(`Gathering prices from Pyth network ${this.settings.symbols.sourceNetwork}...`)\r\n    const symbolInfo = new PythSymbolInfo(this.settings.symbols.sourceNetwork)\r\n    await symbolInfo.load()\r\n    Logger.info(`Loaded ${symbolInfo.getSymbolCount()} product(s)`)\r\n\r\n    const fetcher = new WormholePythPriceFetcher(this.settings.wormhole.spyServiceHost,\r\n      this.settings.pyth.chainId,\r\n      this.settings.pyth.emitterAddress,\r\n      symbolInfo)\r\n\r\n    Logger.info('Waiting for fetcher to boot...')\r\n    await fetcher.start()\r\n\r\n    Logger.info('Waiting for publisher to boot...')\r\n    await publisher.start()\r\n\r\n    Logger.info(`Starting worker routine, interval ${this.settings.pollInterval}s`)\r\n    setInterval(this.callWorkerRoutine, this.settings.pollInterval * 1000, fetcher, publisher)\r\n\r\n    while (!this.shouldQuit) {\r\n      await sleep(1000)\r\n    }\r\n  }\r\n\r\n  async callWorkerRoutine (fetcher: IPriceFetcher, publisher: IPublisher) {\r\n    const wrs = await workerRoutine(fetcher, publisher)\r\n    switch (wrs.status) {\r\n      case StatusCode.OK: {\r\n        Logger.info(`    TxID ${wrs.pub?.txid}`)\r\n        const pendingInfo = await wrs.pub?.confirmation\r\n        if (pendingInfo!['pool-error'] === '') {\r\n          if (pendingInfo!['confirmed-round']) {\r\n            Logger.info(` ✔ Confirmed at round ${pendingInfo!['confirmed-round']}`)\r\n          } else {\r\n            Logger.info('⚠ No confirmation information')\r\n          }\r\n        } else {\r\n          Logger.error(`❌ Rejected: ${pendingInfo!['pool-error']}`)\r\n        }\r\n\r\n        if (wrs.data?.attestations === undefined) {\r\n          Logger.warn(`No attestation data available. Txid= ${wrs.pub?.txid}`)\r\n        } else {\r\n          for (let i = 0; i < wrs!.data!.attestations!.length; ++i) {\r\n            const att = wrs.data.attestations[i]\r\n            Logger.info(`     ${att.symbol}     ${att.price} ± ${att.confidence} exp: ${att.exponent} twap:${att.twap}`)\r\n          }\r\n        }\r\n        break\r\n      }\r\n      case StatusCode.NO_TICKER:\r\n        // Logger.warn('⚠ Poll: No new data available from fetcher data source')\r\n        break\r\n      default:\r\n        Logger.error('❌ ' + wrs.reason)\r\n    }\r\n  }\r\n}\r\n"]}