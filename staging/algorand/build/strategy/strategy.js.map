{"version":3,"file":"strategy.js","sourceRoot":"","sources":["../../backend/strategy/strategy.ts"],"names":[],"mappings":"","sourcesContent":["/**\r\n * Pricecaster Service.\r\n *\r\n * Fetcher backend component.\r\n *\r\n * Copyright 2022 Wormhole Project Contributors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PriceTicker } from '../common/priceTicker'\r\n\r\n/**\r\n * Implements a strategy for obtaining an asset price from\r\n * a set of received prices in a buffer.\r\n */\r\nexport interface IStrategy {\r\n    /**\r\n     *\r\n     * @param size The size of the buffer\r\n     */\r\n    createBuffer(size: number): void\r\n\r\n    /**\r\n     * Clear price buffer\r\n     */\r\n    clearBuffer(): void\r\n\r\n    /**\r\n     * Returns the current number of items in buffer\r\n     */\r\n    bufferCount(): number\r\n\r\n    /**\r\n     * Put a new price in buffer.\r\n     * @param priceData  The price data to put\r\n     * @returns true if successful.\r\n     */\r\n    put(ticker: PriceTicker): boolean\r\n\r\n    /**\r\n     * Get the calculated price according to selected strategy.\r\n     */\r\n    getPrice(): PriceTicker | undefined\r\n}\r\n"]}