{"version":3,"file":"strategyBase.js","sourceRoot":"","sources":["../../backend/strategy/strategyBase.ts"],"names":[],"mappings":";;;AA0BA,MAAsB,YAAY;IAIhC,YAAa,UAAkB,EAAE;QAC/B,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAA;IAC5B,CAAC;IAED,YAAY,CAAE,OAAe;QAC3B,IAAI,CAAC,MAAM,GAAG,EAAE,CAAA;QAChB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;IACxB,CAAC;IAED,WAAW;QACT,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAA;IACxB,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAA;IAC3B,CAAC;IAED,GAAG,CAAE,MAAmB;QACtB,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC,OAAO,EAAE;YACvC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAA;SACpB;QACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACxB,OAAO,IAAI,CAAA;IACb,CAAC;CAGF;AA9BD,oCA8BC","sourcesContent":["/**\r\n * Pricecaster Service.\r\n *\r\n * Fetcher backend component.\r\n *\r\n * Copyright 2022 Wormhole Project Contributors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PriceTicker } from '../common/priceTicker'\r\nimport { IStrategy } from './strategy'\r\n\r\n/**\r\n * A base class for queue-based buffer strategies\r\n */\r\nexport abstract class StrategyBase implements IStrategy {\r\n  protected buffer!: PriceTicker[]\r\n  protected bufSize!: number\r\n\r\n  constructor (bufSize: number = 10) {\r\n    this.createBuffer(bufSize)\r\n  }\r\n\r\n  createBuffer (maxSize: number): void {\r\n    this.buffer = []\r\n    this.bufSize = maxSize\r\n  }\r\n\r\n  clearBuffer (): void {\r\n    this.buffer.length = 0\r\n  }\r\n\r\n  bufferCount (): number {\r\n    return this.buffer.length\r\n  }\r\n\r\n  put (ticker: PriceTicker): boolean {\r\n    if (this.buffer.length === this.bufSize) {\r\n      this.buffer.shift()\r\n    }\r\n    this.buffer.push(ticker)\r\n    return true\r\n  }\r\n\r\n  abstract getPrice(): PriceTicker | undefined\r\n}\r\n"]}